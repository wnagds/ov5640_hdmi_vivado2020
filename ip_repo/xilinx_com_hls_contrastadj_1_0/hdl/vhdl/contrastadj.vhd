-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity contrastadj is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    src_axi_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    src_axi_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
    src_axi_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
    src_axi_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    src_axi_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    src_axi_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    src_axi_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    dst_axi_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
    dst_axi_TKEEP : OUT STD_LOGIC_VECTOR (2 downto 0);
    dst_axi_TSTRB : OUT STD_LOGIC_VECTOR (2 downto 0);
    dst_axi_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    dst_axi_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    dst_axi_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    dst_axi_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    src_axi_TVALID : IN STD_LOGIC;
    src_axi_TREADY : OUT STD_LOGIC;
    dst_axi_TVALID : OUT STD_LOGIC;
    dst_axi_TREADY : IN STD_LOGIC );
end;


architecture behav of contrastadj is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "contrastadj,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-2,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=5.292000,HLS_SYN_LAT=2136254,HLS_SYN_TPT=2136242,HLS_SYN_MEM=3,HLS_SYN_DSP=107,HLS_SYN_FF=28774,HLS_SYN_LUT=36039}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal adj : STD_LOGIC_VECTOR (31 downto 0);
    signal AXIvideo2Mat159_U0_ap_start : STD_LOGIC;
    signal AXIvideo2Mat159_U0_start_full_n : STD_LOGIC;
    signal AXIvideo2Mat159_U0_ap_done : STD_LOGIC;
    signal AXIvideo2Mat159_U0_ap_continue : STD_LOGIC;
    signal AXIvideo2Mat159_U0_ap_idle : STD_LOGIC;
    signal AXIvideo2Mat159_U0_ap_ready : STD_LOGIC;
    signal AXIvideo2Mat159_U0_start_out : STD_LOGIC;
    signal AXIvideo2Mat159_U0_start_write : STD_LOGIC;
    signal AXIvideo2Mat159_U0_src_axi_TREADY : STD_LOGIC;
    signal AXIvideo2Mat159_U0_img_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIvideo2Mat159_U0_img_data_stream_0_V_write : STD_LOGIC;
    signal AXIvideo2Mat159_U0_img_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIvideo2Mat159_U0_img_data_stream_1_V_write : STD_LOGIC;
    signal AXIvideo2Mat159_U0_img_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIvideo2Mat159_U0_img_data_stream_2_V_write : STD_LOGIC;
    signal AXIvideo2Mat159_U0_adj_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal AXIvideo2Mat159_U0_adj_out_write : STD_LOGIC;
    signal Cvt_RGB_to_YCrCb_U0_ap_start : STD_LOGIC;
    signal Cvt_RGB_to_YCrCb_U0_ap_done : STD_LOGIC;
    signal Cvt_RGB_to_YCrCb_U0_ap_continue : STD_LOGIC;
    signal Cvt_RGB_to_YCrCb_U0_ap_idle : STD_LOGIC;
    signal Cvt_RGB_to_YCrCb_U0_ap_ready : STD_LOGIC;
    signal Cvt_RGB_to_YCrCb_U0_p_src_data_stream_0_V_read : STD_LOGIC;
    signal Cvt_RGB_to_YCrCb_U0_p_src_data_stream_1_V_read : STD_LOGIC;
    signal Cvt_RGB_to_YCrCb_U0_p_src_data_stream_2_V_read : STD_LOGIC;
    signal Cvt_RGB_to_YCrCb_U0_p_dst_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Cvt_RGB_to_YCrCb_U0_p_dst_data_stream_0_V_write : STD_LOGIC;
    signal Cvt_RGB_to_YCrCb_U0_p_dst_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Cvt_RGB_to_YCrCb_U0_p_dst_data_stream_1_V_write : STD_LOGIC;
    signal Cvt_RGB_to_YCrCb_U0_p_dst_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Cvt_RGB_to_YCrCb_U0_p_dst_data_stream_2_V_write : STD_LOGIC;
    signal dualAryEqualize_U0_ap_start : STD_LOGIC;
    signal dualAryEqualize_U0_ap_done : STD_LOGIC;
    signal dualAryEqualize_U0_ap_continue : STD_LOGIC;
    signal dualAryEqualize_U0_ap_idle : STD_LOGIC;
    signal dualAryEqualize_U0_ap_ready : STD_LOGIC;
    signal dualAryEqualize_U0_start_out : STD_LOGIC;
    signal dualAryEqualize_U0_start_write : STD_LOGIC;
    signal dualAryEqualize_U0_p_src_data_stream_0_V_read : STD_LOGIC;
    signal dualAryEqualize_U0_p_src_data_stream_1_V_read : STD_LOGIC;
    signal dualAryEqualize_U0_p_src_data_stream_2_V_read : STD_LOGIC;
    signal dualAryEqualize_U0_p_dst_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal dualAryEqualize_U0_p_dst_data_stream_0_V_write : STD_LOGIC;
    signal dualAryEqualize_U0_p_dst_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal dualAryEqualize_U0_p_dst_data_stream_1_V_write : STD_LOGIC;
    signal dualAryEqualize_U0_p_dst_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal dualAryEqualize_U0_p_dst_data_stream_2_V_write : STD_LOGIC;
    signal dualAryEqualize_U0_filter_read : STD_LOGIC;
    signal Cvt_YCrCb_to_RGB_U0_ap_start : STD_LOGIC;
    signal Cvt_YCrCb_to_RGB_U0_ap_done : STD_LOGIC;
    signal Cvt_YCrCb_to_RGB_U0_ap_continue : STD_LOGIC;
    signal Cvt_YCrCb_to_RGB_U0_ap_idle : STD_LOGIC;
    signal Cvt_YCrCb_to_RGB_U0_ap_ready : STD_LOGIC;
    signal Cvt_YCrCb_to_RGB_U0_start_out : STD_LOGIC;
    signal Cvt_YCrCb_to_RGB_U0_start_write : STD_LOGIC;
    signal Cvt_YCrCb_to_RGB_U0_p_src_data_stream_0_V_read : STD_LOGIC;
    signal Cvt_YCrCb_to_RGB_U0_p_src_data_stream_1_V_read : STD_LOGIC;
    signal Cvt_YCrCb_to_RGB_U0_p_src_data_stream_2_V_read : STD_LOGIC;
    signal Cvt_YCrCb_to_RGB_U0_p_dst_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Cvt_YCrCb_to_RGB_U0_p_dst_data_stream_0_V_write : STD_LOGIC;
    signal Cvt_YCrCb_to_RGB_U0_p_dst_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Cvt_YCrCb_to_RGB_U0_p_dst_data_stream_1_V_write : STD_LOGIC;
    signal Cvt_YCrCb_to_RGB_U0_p_dst_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Cvt_YCrCb_to_RGB_U0_p_dst_data_stream_2_V_write : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_start : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_done : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_continue : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_idle : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_ready : STD_LOGIC;
    signal Mat2AXIvideo_U0_img_data_stream_0_V_read : STD_LOGIC;
    signal Mat2AXIvideo_U0_img_data_stream_1_V_read : STD_LOGIC;
    signal Mat2AXIvideo_U0_img_data_stream_2_V_read : STD_LOGIC;
    signal Mat2AXIvideo_U0_dst_axi_TDATA : STD_LOGIC_VECTOR (23 downto 0);
    signal Mat2AXIvideo_U0_dst_axi_TVALID : STD_LOGIC;
    signal Mat2AXIvideo_U0_dst_axi_TKEEP : STD_LOGIC_VECTOR (2 downto 0);
    signal Mat2AXIvideo_U0_dst_axi_TSTRB : STD_LOGIC_VECTOR (2 downto 0);
    signal Mat2AXIvideo_U0_dst_axi_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIvideo_U0_dst_axi_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIvideo_U0_dst_axi_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIvideo_U0_dst_axi_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sync_continue : STD_LOGIC;
    signal img1_data_stream_0_s_full_n : STD_LOGIC;
    signal img1_data_stream_0_s_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img1_data_stream_0_s_empty_n : STD_LOGIC;
    signal img1_data_stream_1_s_full_n : STD_LOGIC;
    signal img1_data_stream_1_s_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img1_data_stream_1_s_empty_n : STD_LOGIC;
    signal img1_data_stream_2_s_full_n : STD_LOGIC;
    signal img1_data_stream_2_s_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img1_data_stream_2_s_empty_n : STD_LOGIC;
    signal adj_c_full_n : STD_LOGIC;
    signal adj_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal adj_c_empty_n : STD_LOGIC;
    signal img2_data_stream_0_s_full_n : STD_LOGIC;
    signal img2_data_stream_0_s_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img2_data_stream_0_s_empty_n : STD_LOGIC;
    signal img2_data_stream_1_s_full_n : STD_LOGIC;
    signal img2_data_stream_1_s_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img2_data_stream_1_s_empty_n : STD_LOGIC;
    signal img2_data_stream_2_s_full_n : STD_LOGIC;
    signal img2_data_stream_2_s_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img2_data_stream_2_s_empty_n : STD_LOGIC;
    signal img3_data_stream_0_s_full_n : STD_LOGIC;
    signal img3_data_stream_0_s_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img3_data_stream_0_s_empty_n : STD_LOGIC;
    signal img3_data_stream_1_s_full_n : STD_LOGIC;
    signal img3_data_stream_1_s_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img3_data_stream_1_s_empty_n : STD_LOGIC;
    signal img3_data_stream_2_s_full_n : STD_LOGIC;
    signal img3_data_stream_2_s_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img3_data_stream_2_s_empty_n : STD_LOGIC;
    signal img5_data_stream_0_s_full_n : STD_LOGIC;
    signal img5_data_stream_0_s_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img5_data_stream_0_s_empty_n : STD_LOGIC;
    signal img5_data_stream_1_s_full_n : STD_LOGIC;
    signal img5_data_stream_1_s_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img5_data_stream_1_s_empty_n : STD_LOGIC;
    signal img5_data_stream_2_s_full_n : STD_LOGIC;
    signal img5_data_stream_2_s_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img5_data_stream_2_s_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal start_for_Cvt_RGB_to_YCrCb_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Cvt_RGB_to_YCrCb_U0_full_n : STD_LOGIC;
    signal start_for_Cvt_RGB_to_YCrCb_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Cvt_RGB_to_YCrCb_U0_empty_n : STD_LOGIC;
    signal start_for_dualAryEqualize_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_dualAryEqualize_U0_full_n : STD_LOGIC;
    signal start_for_dualAryEqualize_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_dualAryEqualize_U0_empty_n : STD_LOGIC;
    signal Cvt_RGB_to_YCrCb_U0_start_full_n : STD_LOGIC;
    signal Cvt_RGB_to_YCrCb_U0_start_write : STD_LOGIC;
    signal start_for_Cvt_YCrCb_to_RGB_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Cvt_YCrCb_to_RGB_U0_full_n : STD_LOGIC;
    signal start_for_Cvt_YCrCb_to_RGB_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Cvt_YCrCb_to_RGB_U0_empty_n : STD_LOGIC;
    signal start_for_Mat2AXIvideo_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Mat2AXIvideo_U0_full_n : STD_LOGIC;
    signal start_for_Mat2AXIvideo_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Mat2AXIvideo_U0_empty_n : STD_LOGIC;
    signal Mat2AXIvideo_U0_start_full_n : STD_LOGIC;
    signal Mat2AXIvideo_U0_start_write : STD_LOGIC;

    component AXIvideo2Mat159 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        src_axi_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
        src_axi_TVALID : IN STD_LOGIC;
        src_axi_TREADY : OUT STD_LOGIC;
        src_axi_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
        src_axi_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
        src_axi_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        src_axi_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        src_axi_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        src_axi_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        img_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_0_V_full_n : IN STD_LOGIC;
        img_data_stream_0_V_write : OUT STD_LOGIC;
        img_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_1_V_full_n : IN STD_LOGIC;
        img_data_stream_1_V_write : OUT STD_LOGIC;
        img_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_2_V_full_n : IN STD_LOGIC;
        img_data_stream_2_V_write : OUT STD_LOGIC;
        adj : IN STD_LOGIC_VECTOR (31 downto 0);
        adj_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        adj_out_full_n : IN STD_LOGIC;
        adj_out_write : OUT STD_LOGIC );
    end component;


    component Cvt_RGB_to_YCrCb IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_src_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_0_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_0_V_read : OUT STD_LOGIC;
        p_src_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_1_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_1_V_read : OUT STD_LOGIC;
        p_src_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_2_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_2_V_read : OUT STD_LOGIC;
        p_dst_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_0_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_0_V_write : OUT STD_LOGIC;
        p_dst_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_1_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_1_V_write : OUT STD_LOGIC;
        p_dst_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_2_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_2_V_write : OUT STD_LOGIC );
    end component;


    component dualAryEqualize IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        p_src_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_0_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_0_V_read : OUT STD_LOGIC;
        p_src_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_1_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_1_V_read : OUT STD_LOGIC;
        p_src_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_2_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_2_V_read : OUT STD_LOGIC;
        p_dst_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_0_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_0_V_write : OUT STD_LOGIC;
        p_dst_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_1_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_1_V_write : OUT STD_LOGIC;
        p_dst_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_2_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_2_V_write : OUT STD_LOGIC;
        filter_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        filter_empty_n : IN STD_LOGIC;
        filter_read : OUT STD_LOGIC );
    end component;


    component Cvt_YCrCb_to_RGB IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        p_src_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_0_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_0_V_read : OUT STD_LOGIC;
        p_src_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_1_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_1_V_read : OUT STD_LOGIC;
        p_src_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_2_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_2_V_read : OUT STD_LOGIC;
        p_dst_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_0_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_0_V_write : OUT STD_LOGIC;
        p_dst_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_1_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_1_V_write : OUT STD_LOGIC;
        p_dst_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_2_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_2_V_write : OUT STD_LOGIC );
    end component;


    component Mat2AXIvideo IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        img_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_0_V_empty_n : IN STD_LOGIC;
        img_data_stream_0_V_read : OUT STD_LOGIC;
        img_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_1_V_empty_n : IN STD_LOGIC;
        img_data_stream_1_V_read : OUT STD_LOGIC;
        img_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_2_V_empty_n : IN STD_LOGIC;
        img_data_stream_2_V_read : OUT STD_LOGIC;
        dst_axi_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
        dst_axi_TVALID : OUT STD_LOGIC;
        dst_axi_TREADY : IN STD_LOGIC;
        dst_axi_TKEEP : OUT STD_LOGIC_VECTOR (2 downto 0);
        dst_axi_TSTRB : OUT STD_LOGIC_VECTOR (2 downto 0);
        dst_axi_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        dst_axi_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        dst_axi_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
        dst_axi_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component fifo_w8_d1_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Cvt_RGBsc4 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_dualArytde IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Cvt_YCrudo IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Mat2AXIvdy IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component contrastadj_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        adj : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    contrastadj_AXILiteS_s_axi_U : component contrastadj_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        adj => adj);

    AXIvideo2Mat159_U0 : component AXIvideo2Mat159
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => AXIvideo2Mat159_U0_ap_start,
        start_full_n => AXIvideo2Mat159_U0_start_full_n,
        ap_done => AXIvideo2Mat159_U0_ap_done,
        ap_continue => AXIvideo2Mat159_U0_ap_continue,
        ap_idle => AXIvideo2Mat159_U0_ap_idle,
        ap_ready => AXIvideo2Mat159_U0_ap_ready,
        start_out => AXIvideo2Mat159_U0_start_out,
        start_write => AXIvideo2Mat159_U0_start_write,
        src_axi_TDATA => src_axi_TDATA,
        src_axi_TVALID => src_axi_TVALID,
        src_axi_TREADY => AXIvideo2Mat159_U0_src_axi_TREADY,
        src_axi_TKEEP => src_axi_TKEEP,
        src_axi_TSTRB => src_axi_TSTRB,
        src_axi_TUSER => src_axi_TUSER,
        src_axi_TLAST => src_axi_TLAST,
        src_axi_TID => src_axi_TID,
        src_axi_TDEST => src_axi_TDEST,
        img_data_stream_0_V_din => AXIvideo2Mat159_U0_img_data_stream_0_V_din,
        img_data_stream_0_V_full_n => img1_data_stream_0_s_full_n,
        img_data_stream_0_V_write => AXIvideo2Mat159_U0_img_data_stream_0_V_write,
        img_data_stream_1_V_din => AXIvideo2Mat159_U0_img_data_stream_1_V_din,
        img_data_stream_1_V_full_n => img1_data_stream_1_s_full_n,
        img_data_stream_1_V_write => AXIvideo2Mat159_U0_img_data_stream_1_V_write,
        img_data_stream_2_V_din => AXIvideo2Mat159_U0_img_data_stream_2_V_din,
        img_data_stream_2_V_full_n => img1_data_stream_2_s_full_n,
        img_data_stream_2_V_write => AXIvideo2Mat159_U0_img_data_stream_2_V_write,
        adj => adj,
        adj_out_din => AXIvideo2Mat159_U0_adj_out_din,
        adj_out_full_n => adj_c_full_n,
        adj_out_write => AXIvideo2Mat159_U0_adj_out_write);

    Cvt_RGB_to_YCrCb_U0 : component Cvt_RGB_to_YCrCb
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Cvt_RGB_to_YCrCb_U0_ap_start,
        ap_done => Cvt_RGB_to_YCrCb_U0_ap_done,
        ap_continue => Cvt_RGB_to_YCrCb_U0_ap_continue,
        ap_idle => Cvt_RGB_to_YCrCb_U0_ap_idle,
        ap_ready => Cvt_RGB_to_YCrCb_U0_ap_ready,
        p_src_data_stream_0_V_dout => img1_data_stream_0_s_dout,
        p_src_data_stream_0_V_empty_n => img1_data_stream_0_s_empty_n,
        p_src_data_stream_0_V_read => Cvt_RGB_to_YCrCb_U0_p_src_data_stream_0_V_read,
        p_src_data_stream_1_V_dout => img1_data_stream_1_s_dout,
        p_src_data_stream_1_V_empty_n => img1_data_stream_1_s_empty_n,
        p_src_data_stream_1_V_read => Cvt_RGB_to_YCrCb_U0_p_src_data_stream_1_V_read,
        p_src_data_stream_2_V_dout => img1_data_stream_2_s_dout,
        p_src_data_stream_2_V_empty_n => img1_data_stream_2_s_empty_n,
        p_src_data_stream_2_V_read => Cvt_RGB_to_YCrCb_U0_p_src_data_stream_2_V_read,
        p_dst_data_stream_0_V_din => Cvt_RGB_to_YCrCb_U0_p_dst_data_stream_0_V_din,
        p_dst_data_stream_0_V_full_n => img2_data_stream_0_s_full_n,
        p_dst_data_stream_0_V_write => Cvt_RGB_to_YCrCb_U0_p_dst_data_stream_0_V_write,
        p_dst_data_stream_1_V_din => Cvt_RGB_to_YCrCb_U0_p_dst_data_stream_1_V_din,
        p_dst_data_stream_1_V_full_n => img2_data_stream_1_s_full_n,
        p_dst_data_stream_1_V_write => Cvt_RGB_to_YCrCb_U0_p_dst_data_stream_1_V_write,
        p_dst_data_stream_2_V_din => Cvt_RGB_to_YCrCb_U0_p_dst_data_stream_2_V_din,
        p_dst_data_stream_2_V_full_n => img2_data_stream_2_s_full_n,
        p_dst_data_stream_2_V_write => Cvt_RGB_to_YCrCb_U0_p_dst_data_stream_2_V_write);

    dualAryEqualize_U0 : component dualAryEqualize
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => dualAryEqualize_U0_ap_start,
        start_full_n => start_for_Cvt_YCrCb_to_RGB_U0_full_n,
        ap_done => dualAryEqualize_U0_ap_done,
        ap_continue => dualAryEqualize_U0_ap_continue,
        ap_idle => dualAryEqualize_U0_ap_idle,
        ap_ready => dualAryEqualize_U0_ap_ready,
        start_out => dualAryEqualize_U0_start_out,
        start_write => dualAryEqualize_U0_start_write,
        p_src_data_stream_0_V_dout => img2_data_stream_0_s_dout,
        p_src_data_stream_0_V_empty_n => img2_data_stream_0_s_empty_n,
        p_src_data_stream_0_V_read => dualAryEqualize_U0_p_src_data_stream_0_V_read,
        p_src_data_stream_1_V_dout => img2_data_stream_1_s_dout,
        p_src_data_stream_1_V_empty_n => img2_data_stream_1_s_empty_n,
        p_src_data_stream_1_V_read => dualAryEqualize_U0_p_src_data_stream_1_V_read,
        p_src_data_stream_2_V_dout => img2_data_stream_2_s_dout,
        p_src_data_stream_2_V_empty_n => img2_data_stream_2_s_empty_n,
        p_src_data_stream_2_V_read => dualAryEqualize_U0_p_src_data_stream_2_V_read,
        p_dst_data_stream_0_V_din => dualAryEqualize_U0_p_dst_data_stream_0_V_din,
        p_dst_data_stream_0_V_full_n => img3_data_stream_0_s_full_n,
        p_dst_data_stream_0_V_write => dualAryEqualize_U0_p_dst_data_stream_0_V_write,
        p_dst_data_stream_1_V_din => dualAryEqualize_U0_p_dst_data_stream_1_V_din,
        p_dst_data_stream_1_V_full_n => img3_data_stream_1_s_full_n,
        p_dst_data_stream_1_V_write => dualAryEqualize_U0_p_dst_data_stream_1_V_write,
        p_dst_data_stream_2_V_din => dualAryEqualize_U0_p_dst_data_stream_2_V_din,
        p_dst_data_stream_2_V_full_n => img3_data_stream_2_s_full_n,
        p_dst_data_stream_2_V_write => dualAryEqualize_U0_p_dst_data_stream_2_V_write,
        filter_dout => adj_c_dout,
        filter_empty_n => adj_c_empty_n,
        filter_read => dualAryEqualize_U0_filter_read);

    Cvt_YCrCb_to_RGB_U0 : component Cvt_YCrCb_to_RGB
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Cvt_YCrCb_to_RGB_U0_ap_start,
        start_full_n => start_for_Mat2AXIvideo_U0_full_n,
        ap_done => Cvt_YCrCb_to_RGB_U0_ap_done,
        ap_continue => Cvt_YCrCb_to_RGB_U0_ap_continue,
        ap_idle => Cvt_YCrCb_to_RGB_U0_ap_idle,
        ap_ready => Cvt_YCrCb_to_RGB_U0_ap_ready,
        start_out => Cvt_YCrCb_to_RGB_U0_start_out,
        start_write => Cvt_YCrCb_to_RGB_U0_start_write,
        p_src_data_stream_0_V_dout => img3_data_stream_0_s_dout,
        p_src_data_stream_0_V_empty_n => img3_data_stream_0_s_empty_n,
        p_src_data_stream_0_V_read => Cvt_YCrCb_to_RGB_U0_p_src_data_stream_0_V_read,
        p_src_data_stream_1_V_dout => img3_data_stream_1_s_dout,
        p_src_data_stream_1_V_empty_n => img3_data_stream_1_s_empty_n,
        p_src_data_stream_1_V_read => Cvt_YCrCb_to_RGB_U0_p_src_data_stream_1_V_read,
        p_src_data_stream_2_V_dout => img3_data_stream_2_s_dout,
        p_src_data_stream_2_V_empty_n => img3_data_stream_2_s_empty_n,
        p_src_data_stream_2_V_read => Cvt_YCrCb_to_RGB_U0_p_src_data_stream_2_V_read,
        p_dst_data_stream_0_V_din => Cvt_YCrCb_to_RGB_U0_p_dst_data_stream_0_V_din,
        p_dst_data_stream_0_V_full_n => img5_data_stream_0_s_full_n,
        p_dst_data_stream_0_V_write => Cvt_YCrCb_to_RGB_U0_p_dst_data_stream_0_V_write,
        p_dst_data_stream_1_V_din => Cvt_YCrCb_to_RGB_U0_p_dst_data_stream_1_V_din,
        p_dst_data_stream_1_V_full_n => img5_data_stream_1_s_full_n,
        p_dst_data_stream_1_V_write => Cvt_YCrCb_to_RGB_U0_p_dst_data_stream_1_V_write,
        p_dst_data_stream_2_V_din => Cvt_YCrCb_to_RGB_U0_p_dst_data_stream_2_V_din,
        p_dst_data_stream_2_V_full_n => img5_data_stream_2_s_full_n,
        p_dst_data_stream_2_V_write => Cvt_YCrCb_to_RGB_U0_p_dst_data_stream_2_V_write);

    Mat2AXIvideo_U0 : component Mat2AXIvideo
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Mat2AXIvideo_U0_ap_start,
        ap_done => Mat2AXIvideo_U0_ap_done,
        ap_continue => Mat2AXIvideo_U0_ap_continue,
        ap_idle => Mat2AXIvideo_U0_ap_idle,
        ap_ready => Mat2AXIvideo_U0_ap_ready,
        img_data_stream_0_V_dout => img5_data_stream_0_s_dout,
        img_data_stream_0_V_empty_n => img5_data_stream_0_s_empty_n,
        img_data_stream_0_V_read => Mat2AXIvideo_U0_img_data_stream_0_V_read,
        img_data_stream_1_V_dout => img5_data_stream_1_s_dout,
        img_data_stream_1_V_empty_n => img5_data_stream_1_s_empty_n,
        img_data_stream_1_V_read => Mat2AXIvideo_U0_img_data_stream_1_V_read,
        img_data_stream_2_V_dout => img5_data_stream_2_s_dout,
        img_data_stream_2_V_empty_n => img5_data_stream_2_s_empty_n,
        img_data_stream_2_V_read => Mat2AXIvideo_U0_img_data_stream_2_V_read,
        dst_axi_TDATA => Mat2AXIvideo_U0_dst_axi_TDATA,
        dst_axi_TVALID => Mat2AXIvideo_U0_dst_axi_TVALID,
        dst_axi_TREADY => dst_axi_TREADY,
        dst_axi_TKEEP => Mat2AXIvideo_U0_dst_axi_TKEEP,
        dst_axi_TSTRB => Mat2AXIvideo_U0_dst_axi_TSTRB,
        dst_axi_TUSER => Mat2AXIvideo_U0_dst_axi_TUSER,
        dst_axi_TLAST => Mat2AXIvideo_U0_dst_axi_TLAST,
        dst_axi_TID => Mat2AXIvideo_U0_dst_axi_TID,
        dst_axi_TDEST => Mat2AXIvideo_U0_dst_axi_TDEST);

    img1_data_stream_0_s_U : component fifo_w8_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat159_U0_img_data_stream_0_V_din,
        if_full_n => img1_data_stream_0_s_full_n,
        if_write => AXIvideo2Mat159_U0_img_data_stream_0_V_write,
        if_dout => img1_data_stream_0_s_dout,
        if_empty_n => img1_data_stream_0_s_empty_n,
        if_read => Cvt_RGB_to_YCrCb_U0_p_src_data_stream_0_V_read);

    img1_data_stream_1_s_U : component fifo_w8_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat159_U0_img_data_stream_1_V_din,
        if_full_n => img1_data_stream_1_s_full_n,
        if_write => AXIvideo2Mat159_U0_img_data_stream_1_V_write,
        if_dout => img1_data_stream_1_s_dout,
        if_empty_n => img1_data_stream_1_s_empty_n,
        if_read => Cvt_RGB_to_YCrCb_U0_p_src_data_stream_1_V_read);

    img1_data_stream_2_s_U : component fifo_w8_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat159_U0_img_data_stream_2_V_din,
        if_full_n => img1_data_stream_2_s_full_n,
        if_write => AXIvideo2Mat159_U0_img_data_stream_2_V_write,
        if_dout => img1_data_stream_2_s_dout,
        if_empty_n => img1_data_stream_2_s_empty_n,
        if_read => Cvt_RGB_to_YCrCb_U0_p_src_data_stream_2_V_read);

    adj_c_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat159_U0_adj_out_din,
        if_full_n => adj_c_full_n,
        if_write => AXIvideo2Mat159_U0_adj_out_write,
        if_dout => adj_c_dout,
        if_empty_n => adj_c_empty_n,
        if_read => dualAryEqualize_U0_filter_read);

    img2_data_stream_0_s_U : component fifo_w8_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Cvt_RGB_to_YCrCb_U0_p_dst_data_stream_0_V_din,
        if_full_n => img2_data_stream_0_s_full_n,
        if_write => Cvt_RGB_to_YCrCb_U0_p_dst_data_stream_0_V_write,
        if_dout => img2_data_stream_0_s_dout,
        if_empty_n => img2_data_stream_0_s_empty_n,
        if_read => dualAryEqualize_U0_p_src_data_stream_0_V_read);

    img2_data_stream_1_s_U : component fifo_w8_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Cvt_RGB_to_YCrCb_U0_p_dst_data_stream_1_V_din,
        if_full_n => img2_data_stream_1_s_full_n,
        if_write => Cvt_RGB_to_YCrCb_U0_p_dst_data_stream_1_V_write,
        if_dout => img2_data_stream_1_s_dout,
        if_empty_n => img2_data_stream_1_s_empty_n,
        if_read => dualAryEqualize_U0_p_src_data_stream_1_V_read);

    img2_data_stream_2_s_U : component fifo_w8_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Cvt_RGB_to_YCrCb_U0_p_dst_data_stream_2_V_din,
        if_full_n => img2_data_stream_2_s_full_n,
        if_write => Cvt_RGB_to_YCrCb_U0_p_dst_data_stream_2_V_write,
        if_dout => img2_data_stream_2_s_dout,
        if_empty_n => img2_data_stream_2_s_empty_n,
        if_read => dualAryEqualize_U0_p_src_data_stream_2_V_read);

    img3_data_stream_0_s_U : component fifo_w8_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => dualAryEqualize_U0_p_dst_data_stream_0_V_din,
        if_full_n => img3_data_stream_0_s_full_n,
        if_write => dualAryEqualize_U0_p_dst_data_stream_0_V_write,
        if_dout => img3_data_stream_0_s_dout,
        if_empty_n => img3_data_stream_0_s_empty_n,
        if_read => Cvt_YCrCb_to_RGB_U0_p_src_data_stream_0_V_read);

    img3_data_stream_1_s_U : component fifo_w8_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => dualAryEqualize_U0_p_dst_data_stream_1_V_din,
        if_full_n => img3_data_stream_1_s_full_n,
        if_write => dualAryEqualize_U0_p_dst_data_stream_1_V_write,
        if_dout => img3_data_stream_1_s_dout,
        if_empty_n => img3_data_stream_1_s_empty_n,
        if_read => Cvt_YCrCb_to_RGB_U0_p_src_data_stream_1_V_read);

    img3_data_stream_2_s_U : component fifo_w8_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => dualAryEqualize_U0_p_dst_data_stream_2_V_din,
        if_full_n => img3_data_stream_2_s_full_n,
        if_write => dualAryEqualize_U0_p_dst_data_stream_2_V_write,
        if_dout => img3_data_stream_2_s_dout,
        if_empty_n => img3_data_stream_2_s_empty_n,
        if_read => Cvt_YCrCb_to_RGB_U0_p_src_data_stream_2_V_read);

    img5_data_stream_0_s_U : component fifo_w8_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Cvt_YCrCb_to_RGB_U0_p_dst_data_stream_0_V_din,
        if_full_n => img5_data_stream_0_s_full_n,
        if_write => Cvt_YCrCb_to_RGB_U0_p_dst_data_stream_0_V_write,
        if_dout => img5_data_stream_0_s_dout,
        if_empty_n => img5_data_stream_0_s_empty_n,
        if_read => Mat2AXIvideo_U0_img_data_stream_0_V_read);

    img5_data_stream_1_s_U : component fifo_w8_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Cvt_YCrCb_to_RGB_U0_p_dst_data_stream_1_V_din,
        if_full_n => img5_data_stream_1_s_full_n,
        if_write => Cvt_YCrCb_to_RGB_U0_p_dst_data_stream_1_V_write,
        if_dout => img5_data_stream_1_s_dout,
        if_empty_n => img5_data_stream_1_s_empty_n,
        if_read => Mat2AXIvideo_U0_img_data_stream_1_V_read);

    img5_data_stream_2_s_U : component fifo_w8_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Cvt_YCrCb_to_RGB_U0_p_dst_data_stream_2_V_din,
        if_full_n => img5_data_stream_2_s_full_n,
        if_write => Cvt_YCrCb_to_RGB_U0_p_dst_data_stream_2_V_write,
        if_dout => img5_data_stream_2_s_dout,
        if_empty_n => img5_data_stream_2_s_empty_n,
        if_read => Mat2AXIvideo_U0_img_data_stream_2_V_read);

    start_for_Cvt_RGBsc4_U : component start_for_Cvt_RGBsc4
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Cvt_RGB_to_YCrCb_U0_din,
        if_full_n => start_for_Cvt_RGB_to_YCrCb_U0_full_n,
        if_write => AXIvideo2Mat159_U0_start_write,
        if_dout => start_for_Cvt_RGB_to_YCrCb_U0_dout,
        if_empty_n => start_for_Cvt_RGB_to_YCrCb_U0_empty_n,
        if_read => Cvt_RGB_to_YCrCb_U0_ap_ready);

    start_for_dualArytde_U : component start_for_dualArytde
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_dualAryEqualize_U0_din,
        if_full_n => start_for_dualAryEqualize_U0_full_n,
        if_write => AXIvideo2Mat159_U0_start_write,
        if_dout => start_for_dualAryEqualize_U0_dout,
        if_empty_n => start_for_dualAryEqualize_U0_empty_n,
        if_read => dualAryEqualize_U0_ap_ready);

    start_for_Cvt_YCrudo_U : component start_for_Cvt_YCrudo
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Cvt_YCrCb_to_RGB_U0_din,
        if_full_n => start_for_Cvt_YCrCb_to_RGB_U0_full_n,
        if_write => dualAryEqualize_U0_start_write,
        if_dout => start_for_Cvt_YCrCb_to_RGB_U0_dout,
        if_empty_n => start_for_Cvt_YCrCb_to_RGB_U0_empty_n,
        if_read => Cvt_YCrCb_to_RGB_U0_ap_ready);

    start_for_Mat2AXIvdy_U : component start_for_Mat2AXIvdy
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Mat2AXIvideo_U0_din,
        if_full_n => start_for_Mat2AXIvideo_U0_full_n,
        if_write => Cvt_YCrCb_to_RGB_U0_start_write,
        if_dout => start_for_Mat2AXIvideo_U0_dout,
        if_empty_n => start_for_Mat2AXIvideo_U0_empty_n,
        if_read => Mat2AXIvideo_U0_ap_ready);




    AXIvideo2Mat159_U0_ap_continue <= ap_const_logic_1;
    AXIvideo2Mat159_U0_ap_start <= ap_start;
    AXIvideo2Mat159_U0_start_full_n <= (start_for_dualAryEqualize_U0_full_n and start_for_Cvt_RGB_to_YCrCb_U0_full_n);
    Cvt_RGB_to_YCrCb_U0_ap_continue <= ap_const_logic_1;
    Cvt_RGB_to_YCrCb_U0_ap_start <= start_for_Cvt_RGB_to_YCrCb_U0_empty_n;
    Cvt_RGB_to_YCrCb_U0_start_full_n <= ap_const_logic_1;
    Cvt_RGB_to_YCrCb_U0_start_write <= ap_const_logic_0;
    Cvt_YCrCb_to_RGB_U0_ap_continue <= ap_const_logic_1;
    Cvt_YCrCb_to_RGB_U0_ap_start <= start_for_Cvt_YCrCb_to_RGB_U0_empty_n;
    Mat2AXIvideo_U0_ap_continue <= ap_const_logic_1;
    Mat2AXIvideo_U0_ap_start <= start_for_Mat2AXIvideo_U0_empty_n;
    Mat2AXIvideo_U0_start_full_n <= ap_const_logic_1;
    Mat2AXIvideo_U0_start_write <= ap_const_logic_0;
    ap_done <= Mat2AXIvideo_U0_ap_done;
    ap_idle <= (dualAryEqualize_U0_ap_idle and Mat2AXIvideo_U0_ap_idle and Cvt_YCrCb_to_RGB_U0_ap_idle and Cvt_RGB_to_YCrCb_U0_ap_idle and AXIvideo2Mat159_U0_ap_idle);
    ap_ready <= AXIvideo2Mat159_U0_ap_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= Mat2AXIvideo_U0_ap_done;
    ap_sync_ready <= AXIvideo2Mat159_U0_ap_ready;
    dst_axi_TDATA <= Mat2AXIvideo_U0_dst_axi_TDATA;
    dst_axi_TDEST <= Mat2AXIvideo_U0_dst_axi_TDEST;
    dst_axi_TID <= Mat2AXIvideo_U0_dst_axi_TID;
    dst_axi_TKEEP <= Mat2AXIvideo_U0_dst_axi_TKEEP;
    dst_axi_TLAST <= Mat2AXIvideo_U0_dst_axi_TLAST;
    dst_axi_TSTRB <= Mat2AXIvideo_U0_dst_axi_TSTRB;
    dst_axi_TUSER <= Mat2AXIvideo_U0_dst_axi_TUSER;
    dst_axi_TVALID <= Mat2AXIvideo_U0_dst_axi_TVALID;
    dualAryEqualize_U0_ap_continue <= ap_const_logic_1;
    dualAryEqualize_U0_ap_start <= start_for_dualAryEqualize_U0_empty_n;
    src_axi_TREADY <= AXIvideo2Mat159_U0_src_axi_TREADY;
    start_for_Cvt_RGB_to_YCrCb_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Cvt_YCrCb_to_RGB_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Mat2AXIvideo_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_dualAryEqualize_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
