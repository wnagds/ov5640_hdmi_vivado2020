// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Cvt_RGB_to_YCrCb (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_src_data_stream_0_V_dout,
        p_src_data_stream_0_V_empty_n,
        p_src_data_stream_0_V_read,
        p_src_data_stream_1_V_dout,
        p_src_data_stream_1_V_empty_n,
        p_src_data_stream_1_V_read,
        p_src_data_stream_2_V_dout,
        p_src_data_stream_2_V_empty_n,
        p_src_data_stream_2_V_read,
        p_dst_data_stream_0_V_din,
        p_dst_data_stream_0_V_full_n,
        p_dst_data_stream_0_V_write,
        p_dst_data_stream_1_V_din,
        p_dst_data_stream_1_V_full_n,
        p_dst_data_stream_1_V_write,
        p_dst_data_stream_2_V_din,
        p_dst_data_stream_2_V_full_n,
        p_dst_data_stream_2_V_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state10 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] p_src_data_stream_0_V_dout;
input   p_src_data_stream_0_V_empty_n;
output   p_src_data_stream_0_V_read;
input  [7:0] p_src_data_stream_1_V_dout;
input   p_src_data_stream_1_V_empty_n;
output   p_src_data_stream_1_V_read;
input  [7:0] p_src_data_stream_2_V_dout;
input   p_src_data_stream_2_V_empty_n;
output   p_src_data_stream_2_V_read;
output  [7:0] p_dst_data_stream_0_V_din;
input   p_dst_data_stream_0_V_full_n;
output   p_dst_data_stream_0_V_write;
output  [7:0] p_dst_data_stream_1_V_din;
input   p_dst_data_stream_1_V_full_n;
output   p_dst_data_stream_1_V_write;
output  [7:0] p_dst_data_stream_2_V_din;
input   p_dst_data_stream_2_V_full_n;
output   p_dst_data_stream_2_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg p_src_data_stream_0_V_read;
reg p_src_data_stream_1_V_read;
reg p_src_data_stream_2_V_read;
reg p_dst_data_stream_0_V_write;
reg p_dst_data_stream_1_V_write;
reg p_dst_data_stream_2_V_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    p_src_data_stream_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_reg_654;
reg    p_src_data_stream_1_V_blk_n;
reg    p_src_data_stream_2_V_blk_n;
reg    p_dst_data_stream_0_V_blk_n;
reg    ap_enable_reg_pp0_iter6;
reg   [0:0] ap_reg_pp0_iter5_exitcond_reg_654;
reg    p_dst_data_stream_1_V_blk_n;
reg    p_dst_data_stream_2_V_blk_n;
reg   [10:0] j_reg_242;
wire   [0:0] exitcond5_fu_253_p2;
wire    ap_CS_fsm_state2;
wire   [10:0] i_3_fu_259_p2;
reg   [10:0] i_3_reg_649;
wire   [0:0] exitcond_fu_265_p2;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state6_pp0_stage0_iter3;
wire    ap_block_state7_pp0_stage0_iter4;
wire    ap_block_state8_pp0_stage0_iter5;
reg    ap_block_state9_pp0_stage0_iter6;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] ap_reg_pp0_iter1_exitcond_reg_654;
reg   [0:0] ap_reg_pp0_iter2_exitcond_reg_654;
reg   [0:0] ap_reg_pp0_iter3_exitcond_reg_654;
reg   [0:0] ap_reg_pp0_iter4_exitcond_reg_654;
wire   [10:0] j_2_fu_271_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [7:0] tmp_94_reg_663;
reg   [7:0] ap_reg_pp0_iter2_tmp_94_reg_663;
reg   [7:0] tmp_95_reg_671;
reg   [7:0] ap_reg_pp0_iter2_tmp_95_reg_671;
reg   [7:0] ap_reg_pp0_iter3_tmp_95_reg_671;
reg   [7:0] tmp_96_reg_677;
reg   [7:0] ap_reg_pp0_iter2_tmp_96_reg_677;
wire   [15:0] OP2_V_1_cast1_fu_281_p1;
reg   [15:0] OP2_V_1_cast1_reg_689;
wire   [15:0] p_Val2_6_fu_311_p2;
reg   [15:0] p_Val2_6_reg_700;
wire   [15:0] tmp_20_fu_317_p2;
reg   [15:0] tmp_20_reg_705;
wire   [14:0] p_Val2_s_fu_344_p2;
reg   [14:0] p_Val2_s_reg_710;
wire   [13:0] grp_fu_622_p3;
reg   [13:0] tmp2_reg_715;
reg    ap_enable_reg_pp0_iter3;
wire   [40:0] grp_fu_630_p3;
reg   [40:0] p_Val2_7_reg_720;
wire   [12:0] p_Val2_3_fu_394_p2;
reg   [12:0] p_Val2_3_reg_725;
wire  signed [15:0] grp_fu_638_p3;
reg  signed [15:0] p_Val2_9_reg_730;
wire   [15:0] p_Val2_5_fu_411_p2;
reg   [15:0] p_Val2_5_reg_735;
reg   [7:0] y_V_reg_740;
reg   [7:0] u_V_reg_745;
reg   [7:0] v_V_reg_750;
wire   [0:0] icmp_fu_526_p2;
reg   [0:0] icmp_reg_755;
reg   [3:0] tmp_89_reg_760;
reg   [3:0] tmp_90_reg_765;
wire   [7:0] p_Val2_22_fu_564_p3;
reg   [7:0] p_Val2_22_reg_770;
wire   [7:0] p_u_V_fu_577_p3;
reg   [7:0] p_u_V_reg_775;
wire   [0:0] tmp_33_fu_584_p2;
reg   [0:0] tmp_33_reg_780;
wire   [7:0] p_v_V_fu_595_p3;
reg   [7:0] p_v_V_reg_785;
wire   [0:0] tmp_35_fu_602_p2;
reg   [0:0] tmp_35_reg_790;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg   [10:0] i_reg_231;
reg    ap_block_state1;
wire    ap_CS_fsm_state10;
reg    ap_block_pp0_stage0_01001;
wire   [14:0] p_shl4_fu_289_p3;
wire   [11:0] p_shl5_fu_300_p3;
wire   [15:0] p_shl4_cast_fu_296_p1;
wire   [15:0] p_shl5_cast_fu_307_p1;
wire   [7:0] tmp_20_fu_317_p1;
wire   [13:0] p_shl1_fu_322_p3;
wire   [8:0] p_shl2_fu_333_p3;
wire   [14:0] p_shl1_cast_fu_329_p1;
wire   [14:0] p_shl2_cast_fu_340_p1;
wire   [12:0] tmp35_fu_350_p3;
wire  signed [39:0] p_Val2_14_cast_fu_361_p1;
wire   [11:0] p_shl8_fu_368_p3;
wire   [8:0] p_shl9_fu_383_p3;
wire   [12:0] p_shl8_cast1_fu_375_p1;
wire   [12:0] p_shl9_cast_fu_390_p1;
wire   [14:0] p_shl_fu_400_p3;
wire   [15:0] p_shl_cast_fu_407_p1;
wire   [15:0] p_shl8_cast_fu_379_p1;
wire   [14:0] p_shl3_fu_417_p3;
wire   [15:0] p_shl3_cast_fu_424_p1;
wire   [15:0] tmp_cast_fu_428_p1;
wire   [15:0] tmp2_cast_fu_437_p1;
wire   [15:0] tmp1_fu_431_p2;
wire   [15:0] tmp_s_fu_440_p2;
wire   [41:0] tmp_27_fu_456_p1;
wire   [41:0] tmp_28_fu_459_p1;
wire   [41:0] p_Val2_20_fu_462_p2;
wire   [41:0] addconv_fu_468_p2;
wire   [16:0] tmp_56_cast_fu_484_p1;
wire   [16:0] tmp_57_cast_fu_487_p1;
wire   [16:0] tmp4_fu_490_p2;
wire   [17:0] tmp4_cast_fu_496_p1;
wire   [17:0] tmp_29_fu_500_p2;
wire   [3:0] tmp_88_fu_516_p4;
wire   [7:0] p_y_V_fu_552_p3;
wire   [0:0] tmp_31_fu_558_p2;
wire   [0:0] icmp5_fu_572_p2;
wire   [0:0] icmp8_fu_590_p2;
wire   [5:0] grp_fu_622_p0;
wire   [7:0] grp_fu_622_p1;
wire   [12:0] grp_fu_622_p2;
wire   [7:0] grp_fu_630_p0;
wire   [7:0] grp_fu_630_p1;
wire   [39:0] grp_fu_630_p2;
wire  signed [6:0] grp_fu_638_p0;
wire   [7:0] grp_fu_638_p1;
reg    grp_fu_622_ce;
reg    grp_fu_630_ce;
reg    grp_fu_638_ce;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [13:0] grp_fu_622_p10;
wire   [13:0] grp_fu_622_p20;
wire   [15:0] grp_fu_630_p10;
wire   [40:0] grp_fu_630_p20;
wire   [14:0] grp_fu_638_p10;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
end

contrastadj_mac_mbkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 13 ),
    .dout_WIDTH( 14 ))
contrastadj_mac_mbkb_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_622_p0),
    .din1(grp_fu_622_p1),
    .din2(grp_fu_622_p2),
    .ce(grp_fu_622_ce),
    .dout(grp_fu_622_p3)
);

contrastadj_mac_mcud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 40 ),
    .dout_WIDTH( 41 ))
contrastadj_mac_mcud_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_630_p0),
    .din1(grp_fu_630_p1),
    .din2(grp_fu_630_p2),
    .ce(grp_fu_630_ce),
    .dout(grp_fu_630_p3)
);

contrastadj_mac_mdEe #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
contrastadj_mac_mdEe_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_638_p0),
    .din1(grp_fu_638_p1),
    .din2(tmp_20_reg_705),
    .ce(grp_fu_638_ce),
    .dout(grp_fu_638_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((exitcond5_fu_253_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((exitcond5_fu_253_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end else if (((exitcond5_fu_253_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter6 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        i_reg_231 <= i_3_reg_649;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_231 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_265_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_reg_242 <= j_2_fu_271_p2;
    end else if (((exitcond5_fu_253_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_242 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_reg_654 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        OP2_V_1_cast1_reg_689[7 : 0] <= OP2_V_1_cast1_fu_281_p1[7 : 0];
        tmp_94_reg_663 <= p_src_data_stream_0_V_dout;
        tmp_95_reg_671 <= p_src_data_stream_1_V_dout;
        tmp_96_reg_677 <= p_src_data_stream_2_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_reg_pp0_iter1_exitcond_reg_654 <= exitcond_reg_654;
        exitcond_reg_654 <= exitcond_fu_265_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_reg_pp0_iter2_exitcond_reg_654 <= ap_reg_pp0_iter1_exitcond_reg_654;
        ap_reg_pp0_iter2_tmp_94_reg_663 <= tmp_94_reg_663;
        ap_reg_pp0_iter2_tmp_95_reg_671 <= tmp_95_reg_671;
        ap_reg_pp0_iter2_tmp_96_reg_677 <= tmp_96_reg_677;
        ap_reg_pp0_iter3_exitcond_reg_654 <= ap_reg_pp0_iter2_exitcond_reg_654;
        ap_reg_pp0_iter3_tmp_95_reg_671 <= ap_reg_pp0_iter2_tmp_95_reg_671;
        ap_reg_pp0_iter4_exitcond_reg_654 <= ap_reg_pp0_iter3_exitcond_reg_654;
        ap_reg_pp0_iter5_exitcond_reg_654 <= ap_reg_pp0_iter4_exitcond_reg_654;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_3_reg_649 <= i_3_fu_259_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter3_exitcond_reg_654 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_reg_755 <= icmp_fu_526_p2;
        tmp_89_reg_760 <= {{addconv_fu_468_p2[15:12]}};
        tmp_90_reg_765 <= {{tmp_29_fu_500_p2[15:12]}};
        u_V_reg_745 <= {{addconv_fu_468_p2[15:8]}};
        v_V_reg_750 <= {{tmp_29_fu_500_p2[15:8]}};
        y_V_reg_740 <= {{tmp_s_fu_440_p2[15:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter4_exitcond_reg_654 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_Val2_22_reg_770 <= p_Val2_22_fu_564_p3;
        p_u_V_reg_775 <= p_u_V_fu_577_p3;
        p_v_V_reg_785 <= p_v_V_fu_595_p3;
        tmp_33_reg_780 <= tmp_33_fu_584_p2;
        tmp_35_reg_790 <= tmp_35_fu_602_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter2_exitcond_reg_654 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_Val2_3_reg_725[12 : 1] <= p_Val2_3_fu_394_p2[12 : 1];
        p_Val2_5_reg_735[15 : 4] <= p_Val2_5_fu_411_p2[15 : 4];
        p_Val2_s_reg_710[14 : 1] <= p_Val2_s_fu_344_p2[14 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter1_exitcond_reg_654 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_Val2_6_reg_700[15 : 4] <= p_Val2_6_fu_311_p2[15 : 4];
        tmp_20_reg_705 <= tmp_20_fu_317_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter2_exitcond_reg_654 == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_Val2_7_reg_720 <= grp_fu_630_p3;
        p_Val2_9_reg_730 <= grp_fu_638_p3;
        tmp2_reg_715 <= grp_fu_622_p3;
    end
end

always @ (*) begin
    if ((exitcond_fu_265_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond5_fu_253_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond5_fu_253_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_622_ce = 1'b1;
    end else begin
        grp_fu_622_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_630_ce = 1'b1;
    end else begin
        grp_fu_630_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_638_ce = 1'b1;
    end else begin
        grp_fu_638_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter5_exitcond_reg_654 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        p_dst_data_stream_0_V_blk_n = p_dst_data_stream_0_V_full_n;
    end else begin
        p_dst_data_stream_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter5_exitcond_reg_654 == 1'd0) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_dst_data_stream_0_V_write = 1'b1;
    end else begin
        p_dst_data_stream_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter5_exitcond_reg_654 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        p_dst_data_stream_1_V_blk_n = p_dst_data_stream_1_V_full_n;
    end else begin
        p_dst_data_stream_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter5_exitcond_reg_654 == 1'd0) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_dst_data_stream_1_V_write = 1'b1;
    end else begin
        p_dst_data_stream_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter5_exitcond_reg_654 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        p_dst_data_stream_2_V_blk_n = p_dst_data_stream_2_V_full_n;
    end else begin
        p_dst_data_stream_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter5_exitcond_reg_654 == 1'd0) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_dst_data_stream_2_V_write = 1'b1;
    end else begin
        p_dst_data_stream_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_654 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_src_data_stream_0_V_blk_n = p_src_data_stream_0_V_empty_n;
    end else begin
        p_src_data_stream_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_reg_654 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_src_data_stream_0_V_read = 1'b1;
    end else begin
        p_src_data_stream_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_654 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_src_data_stream_1_V_blk_n = p_src_data_stream_1_V_empty_n;
    end else begin
        p_src_data_stream_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_reg_654 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_src_data_stream_1_V_read = 1'b1;
    end else begin
        p_src_data_stream_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_654 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_src_data_stream_2_V_blk_n = p_src_data_stream_2_V_empty_n;
    end else begin
        p_src_data_stream_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_reg_654 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_src_data_stream_2_V_read = 1'b1;
    end else begin
        p_src_data_stream_2_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond5_fu_253_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond_fu_265_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter5 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter6 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter5 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter6 == 1'b1)) | ((exitcond_fu_265_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign OP2_V_1_cast1_fu_281_p1 = p_src_data_stream_1_V_dout;

assign addconv_fu_468_p2 = (42'd32768 + p_Val2_20_fu_462_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter6 == 1'b1) & (((ap_reg_pp0_iter5_exitcond_reg_654 == 1'd0) & (p_dst_data_stream_2_V_full_n == 1'b0)) | ((ap_reg_pp0_iter5_exitcond_reg_654 == 1'd0) & (p_dst_data_stream_1_V_full_n == 1'b0)) | ((ap_reg_pp0_iter5_exitcond_reg_654 == 1'd0) & (p_dst_data_stream_0_V_full_n == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((exitcond_reg_654 == 1'd0) & (p_src_data_stream_2_V_empty_n == 1'b0)) | ((exitcond_reg_654 == 1'd0) & (p_src_data_stream_1_V_empty_n == 1'b0)) | ((exitcond_reg_654 == 1'd0) & (p_src_data_stream_0_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter6 == 1'b1) & (((ap_reg_pp0_iter5_exitcond_reg_654 == 1'd0) & (p_dst_data_stream_2_V_full_n == 1'b0)) | ((ap_reg_pp0_iter5_exitcond_reg_654 == 1'd0) & (p_dst_data_stream_1_V_full_n == 1'b0)) | ((ap_reg_pp0_iter5_exitcond_reg_654 == 1'd0) & (p_dst_data_stream_0_V_full_n == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((exitcond_reg_654 == 1'd0) & (p_src_data_stream_2_V_empty_n == 1'b0)) | ((exitcond_reg_654 == 1'd0) & (p_src_data_stream_1_V_empty_n == 1'b0)) | ((exitcond_reg_654 == 1'd0) & (p_src_data_stream_0_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter6 == 1'b1) & (((ap_reg_pp0_iter5_exitcond_reg_654 == 1'd0) & (p_dst_data_stream_2_V_full_n == 1'b0)) | ((ap_reg_pp0_iter5_exitcond_reg_654 == 1'd0) & (p_dst_data_stream_1_V_full_n == 1'b0)) | ((ap_reg_pp0_iter5_exitcond_reg_654 == 1'd0) & (p_dst_data_stream_0_V_full_n == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((exitcond_reg_654 == 1'd0) & (p_src_data_stream_2_V_empty_n == 1'b0)) | ((exitcond_reg_654 == 1'd0) & (p_src_data_stream_1_V_empty_n == 1'b0)) | ((exitcond_reg_654 == 1'd0) & (p_src_data_stream_0_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = (((exitcond_reg_654 == 1'd0) & (p_src_data_stream_2_V_empty_n == 1'b0)) | ((exitcond_reg_654 == 1'd0) & (p_src_data_stream_1_V_empty_n == 1'b0)) | ((exitcond_reg_654 == 1'd0) & (p_src_data_stream_0_V_empty_n == 1'b0)));
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_pp0_stage0_iter6 = (((ap_reg_pp0_iter5_exitcond_reg_654 == 1'd0) & (p_dst_data_stream_2_V_full_n == 1'b0)) | ((ap_reg_pp0_iter5_exitcond_reg_654 == 1'd0) & (p_dst_data_stream_1_V_full_n == 1'b0)) | ((ap_reg_pp0_iter5_exitcond_reg_654 == 1'd0) & (p_dst_data_stream_0_V_full_n == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign exitcond5_fu_253_p2 = ((i_reg_231 == 11'd1080) ? 1'b1 : 1'b0);

assign exitcond_fu_265_p2 = ((j_reg_242 == 11'd1920) ? 1'b1 : 1'b0);

assign grp_fu_622_p0 = 14'd25;

assign grp_fu_622_p1 = grp_fu_622_p10;

assign grp_fu_622_p10 = p_src_data_stream_2_V_dout;

assign grp_fu_622_p2 = grp_fu_622_p20;

assign grp_fu_622_p20 = tmp35_fu_350_p3;

assign grp_fu_630_p0 = 16'd94;

assign grp_fu_630_p1 = grp_fu_630_p10;

assign grp_fu_630_p10 = p_src_data_stream_1_V_dout;

assign grp_fu_630_p2 = grp_fu_630_p20;

assign grp_fu_630_p20 = $unsigned(p_Val2_14_cast_fu_361_p1);

assign grp_fu_638_p0 = 15'd32730;

assign grp_fu_638_p1 = grp_fu_638_p10;

assign grp_fu_638_p10 = p_src_data_stream_0_V_dout;

assign i_3_fu_259_p2 = (i_reg_231 + 11'd1);

assign icmp5_fu_572_p2 = ((tmp_89_reg_760 == 4'd0) ? 1'b1 : 1'b0);

assign icmp8_fu_590_p2 = ((tmp_90_reg_765 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_fu_526_p2 = ((tmp_88_fu_516_p4 == 4'd0) ? 1'b1 : 1'b0);

assign j_2_fu_271_p2 = (j_reg_242 + 11'd1);

assign p_Val2_14_cast_fu_361_p1 = $signed(p_Val2_6_reg_700);

assign p_Val2_20_fu_462_p2 = (tmp_27_fu_456_p1 - tmp_28_fu_459_p1);

assign p_Val2_22_fu_564_p3 = ((tmp_31_fu_558_p2[0:0] === 1'b1) ? 8'd235 : p_y_V_fu_552_p3);

assign p_Val2_3_fu_394_p2 = (p_shl8_cast1_fu_375_p1 + p_shl9_cast_fu_390_p1);

assign p_Val2_5_fu_411_p2 = (p_shl_cast_fu_407_p1 - p_shl8_cast_fu_379_p1);

assign p_Val2_6_fu_311_p2 = (p_shl4_cast_fu_296_p1 - p_shl5_cast_fu_307_p1);

assign p_Val2_s_fu_344_p2 = (p_shl1_cast_fu_329_p1 + p_shl2_cast_fu_340_p1);

assign p_dst_data_stream_0_V_din = p_Val2_22_reg_770;

assign p_dst_data_stream_1_V_din = ((tmp_33_reg_780[0:0] === 1'b1) ? 8'd239 : p_u_V_reg_775);

assign p_dst_data_stream_2_V_din = ((tmp_35_reg_790[0:0] === 1'b1) ? 8'd239 : p_v_V_reg_785);

assign p_shl1_cast_fu_329_p1 = p_shl1_fu_322_p3;

assign p_shl1_fu_322_p3 = {{ap_reg_pp0_iter2_tmp_94_reg_663}, {6'd0}};

assign p_shl2_cast_fu_340_p1 = p_shl2_fu_333_p3;

assign p_shl2_fu_333_p3 = {{ap_reg_pp0_iter2_tmp_94_reg_663}, {1'd0}};

assign p_shl3_cast_fu_424_p1 = p_shl3_fu_417_p3;

assign p_shl3_fu_417_p3 = {{ap_reg_pp0_iter3_tmp_95_reg_671}, {7'd0}};

assign p_shl4_cast_fu_296_p1 = p_shl4_fu_289_p3;

assign p_shl4_fu_289_p3 = {{tmp_94_reg_663}, {7'd0}};

assign p_shl5_cast_fu_307_p1 = p_shl5_fu_300_p3;

assign p_shl5_fu_300_p3 = {{tmp_94_reg_663}, {4'd0}};

assign p_shl8_cast1_fu_375_p1 = p_shl8_fu_368_p3;

assign p_shl8_cast_fu_379_p1 = p_shl8_fu_368_p3;

assign p_shl8_fu_368_p3 = {{ap_reg_pp0_iter2_tmp_96_reg_677}, {4'd0}};

assign p_shl9_cast_fu_390_p1 = p_shl9_fu_383_p3;

assign p_shl9_fu_383_p3 = {{ap_reg_pp0_iter2_tmp_96_reg_677}, {1'd0}};

assign p_shl_cast_fu_407_p1 = p_shl_fu_400_p3;

assign p_shl_fu_400_p3 = {{ap_reg_pp0_iter2_tmp_96_reg_677}, {7'd0}};

assign p_u_V_fu_577_p3 = ((icmp5_fu_572_p2[0:0] === 1'b1) ? 8'd16 : u_V_reg_745);

assign p_v_V_fu_595_p3 = ((icmp8_fu_590_p2[0:0] === 1'b1) ? 8'd16 : v_V_reg_750);

assign p_y_V_fu_552_p3 = ((icmp_reg_755[0:0] === 1'b1) ? 8'd16 : y_V_reg_740);

assign tmp1_fu_431_p2 = (p_shl3_cast_fu_424_p1 + tmp_cast_fu_428_p1);

assign tmp2_cast_fu_437_p1 = tmp2_reg_715;

assign tmp35_fu_350_p3 = {{5'd16}, {ap_reg_pp0_iter2_tmp_95_reg_671}};

assign tmp4_cast_fu_496_p1 = tmp4_fu_490_p2;

assign tmp4_fu_490_p2 = (tmp_56_cast_fu_484_p1 + tmp_57_cast_fu_487_p1);

assign tmp_20_fu_317_p1 = OP2_V_1_cast1_reg_689;

assign tmp_20_fu_317_p2 = ($signed(16'd65462) * $signed({{1'b0}, {tmp_20_fu_317_p1}}));

assign tmp_27_fu_456_p1 = p_Val2_7_reg_720;

assign tmp_28_fu_459_p1 = p_Val2_3_reg_725;

assign tmp_29_fu_500_p2 = (18'd32768 + tmp4_cast_fu_496_p1);

assign tmp_31_fu_558_p2 = ((p_y_V_fu_552_p3 > 8'd235) ? 1'b1 : 1'b0);

assign tmp_33_fu_584_p2 = ((p_u_V_fu_577_p3 > 8'd239) ? 1'b1 : 1'b0);

assign tmp_35_fu_602_p2 = ((p_v_V_fu_595_p3 > 8'd239) ? 1'b1 : 1'b0);

assign tmp_56_cast_fu_484_p1 = $unsigned(p_Val2_9_reg_730);

assign tmp_57_cast_fu_487_p1 = p_Val2_5_reg_735;

assign tmp_88_fu_516_p4 = {{tmp_s_fu_440_p2[15:12]}};

assign tmp_cast_fu_428_p1 = p_Val2_s_reg_710;

assign tmp_s_fu_440_p2 = (tmp2_cast_fu_437_p1 + tmp1_fu_431_p2);

always @ (posedge ap_clk) begin
    OP2_V_1_cast1_reg_689[15:8] <= 8'b00000000;
    p_Val2_6_reg_700[3:0] <= 4'b0000;
    p_Val2_s_reg_710[0] <= 1'b0;
    p_Val2_3_reg_725[0] <= 1'b0;
    p_Val2_5_reg_735[3:0] <= 4'b0000;
end

endmodule //Cvt_RGB_to_YCrCb
